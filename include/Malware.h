//
// Created by HORIA on 29.12.2023.
//

#ifndef MALWARE_TYPES_OOP_MALWARE_H
#define MALWARE_TYPES_OOP_MALWARE_H

#include <list>
#include <string>
#include <vector>
#include <functional>

class Malware {
public:
    explicit Malware(double impactRating=0.0, int day=1, int month=1,int year=1970, std::string name="",
                     std::string infectionMethod="Unknown", std::list<std::string> modifiedRegisters={});
    virtual ~Malware()=default;
    //getters
    [[nodiscard]] double get_impact_rating() const;
    int* get_date();
    [[nodiscard]] std::string get_name() const;
    [[nodiscard]] std::string get_infection_method() const;
    [[nodiscard]] std::list<std::string> get_modified_registers() const;
    bool get_read_called() const;
    bool get_print_called() const;
    bool get_checked_regs() const;
    //setters
    void set_checked_regs(bool checkedRegs);
    void set_read_called(bool readCalled);
    void set_print_called(bool printCalled);
    void set_impact_rating(double impactRating);
    void set_date(const int date[]);
    void set_name(const std::string& name);
    void set_infection_method(const std::string& infectionMethod);
    void set_modifiedRegisters(const std::list<std::string>& modifiedRegisters);
    virtual void update_impact_rating();
    friend std::istream& operator>>(std::istream& out, Malware& obj);
    friend std::ostream& operator<<(std::ostream& out, Malware& obj);
    virtual std::istream& read(std::istream& in);
    virtual std::ostream& print(std::ostream& out);
    static void tokenize(std::string_view s, std::list<std::string>& l, std::string_view delim);
protected:
    static bool is_in(std::string_view s, const std::vector<std::string>& v);
    static double calculateRating(double val, const std::list<std::string>& l,const std::vector<std::string>& v, const std::function<double (double val)>& calc);
private:
    double m_impactRating {};
    int m_date[3];
    std::string m_name {};
    std::string m_infectionMethod {};
    std::list<std::string> m_modifiedRegisters {};
    bool m_readMalwareCalled {false};
    bool m_printMalwareCalled {false};
    bool m_checkedForVulnerableRegisters {false};
};


#endif //MALWARE_TYPES_OOP_MALWARE_H
