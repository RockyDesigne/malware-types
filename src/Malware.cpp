//
// Created by HORIA on 29.12.2023.
//

#include "Malware.h"

#include <iostream>

Malware::Malware(double impactRating, int day, int month, int year, std::string name, std::string infectionMethod,
                 std::list <std::string> modifiedRegisters) :
        m_impactRating{impactRating},
        m_name{std::move(name)},m_infectionMethod{std::move(infectionMethod)},m_modifiedRegisters{std::move(modifiedRegisters)} {
    m_date[0] = day;
    m_date[1] = month;
    m_date[2] = year;
}

double Malware::get_impact_rating() const {
    return m_impactRating;
}

int *Malware::get_date() {return m_date;}

std::string Malware::get_name() const {return m_name;}

std::string Malware::get_infection_method() const {return m_infectionMethod;}

std::list<std::string> Malware::get_modified_registers() const {return m_modifiedRegisters;}

void Malware::set_impact_rating(double impactRating) {m_impactRating=impactRating;}

void Malware::set_date(const int *date) {for (int i=0;i<3;++i) {m_date[i]=date[i];}}

void Malware::set_name(const std::string &name) {m_name=name;}

void Malware::set_infection_method(const std::string &infectionMethod) {m_infectionMethod=infectionMethod;}

void Malware::set_modifiedRegisters(const std::list<std::string> &modifiedRegisters) {m_modifiedRegisters=modifiedRegisters;}

bool Malware::is_in(std::string_view s, const std::vector<std::string> &v) {
    return std::any_of(v.begin(),v.end(),[&s](std::string_view elem){return elem == s;});
}

double Malware::calculateRating(double val, const std::list<std::string> &l, const std::vector<std::string> &v,
                                const std::function<double(double)> &calc) {
    std::for_each(l.begin(),l.end(),[&v,&val,&calc](std::string_view elem){
        if (Malware::is_in(elem, v)) {
            val += calc(val);
        }
    });
    return val;
}

bool Malware::get_checked_regs() const {
    return m_checkedForVulnerableRegisters;
}

void Malware::set_checked_regs(bool checkedRegs) {
    m_checkedForVulnerableRegisters = checkedRegs;
}

void Malware::update_impact_rating() {
    if (m_checkedForVulnerableRegisters) {
        return;
    }
    std::vector<std::string> v {"HKLM-run", "HKCU-run"};
    m_impactRating = calculateRating(0, Malware::get_modified_registers(),v,[](double add){return add+20;});
}

void Malware::tokenize(std::string_view s, std::list<std::string> &l, std::string_view delim) {
    int start {}, end {};
    while ((end = s.find(delim, start)) != std::string::npos) {
        std::string_view token {s};
        token.remove_prefix(start);
        token.remove_suffix(s.length() - end);
        l.push_back(std::string {token});
        start = end+delim.length();
    }
    s.remove_prefix(start);
    l.push_back(std::string {s});
}

std::istream& operator>>(std::istream& in, Malware& obj) {
    return obj.read(in);
}

std::ostream& operator<<(std::ostream& out, Malware& obj) {
    return obj.print(out);
}

std::istream& Malware::read(std::istream &in) {
    if (m_readMalwareCalled) {
        return in;
    }
    std::cout << "Introdu data infectarii(zi luna an): ";
    std::for_each(m_date,m_date+3,[&in](int& item){in >> item;});
    std::cout << "\nIntrodu nume malware: ";
    in >> m_name;
    std::cout << "\nIntrodu metoda infectie: ";
    in >> m_infectionMethod;
    std::cout << "\nIntrodu registri modificati: ";
    std::string registers;
    char c;
    in >> c;
    std::getline(in, registers);
    std::string delim {" "};
    Malware::tokenize(registers,m_modifiedRegisters,delim);
    std::cout << '\n';
    return in;
}

bool Malware::get_read_called() const {
    return m_readMalwareCalled;
}

void Malware::set_read_called(bool readCalled) {
    m_readMalwareCalled = readCalled;
}

std::ostream &Malware::print(std::ostream &out) {
    if (m_printMalwareCalled) {
        return out;
    }
    out << "Impact rating: " << m_impactRating;
    out << "\nInfection date: " << m_date[0] << '/' << m_date[1] << "/" << m_date[2];
    out << "\nName: " << m_name;
    out << "\nInfection method: " << m_infectionMethod;
    out << "\nModified Registers: ";
    std::for_each(m_modifiedRegisters.begin(),m_modifiedRegisters.end(),[&out](auto& reg){out << reg << ',';});
    out << '\n';
    return out;
}

bool Malware::get_print_called() const {
    return m_printMalwareCalled;
}
void Malware::set_print_called(bool printCalled) {
    m_printMalwareCalled = printCalled;
}
