//
// Created by HORIA on 29.12.2023.
//

#include "Computer.h"
#include "MalwareFactory.h"

int Computer::m_id = 0;

Computer::Computer(double finalRating, std::list<Malware *> malwares) : m_finalRating{finalRating}, m_malwares{std::move(malwares)} {
    m_unique_id = m_id;
    ++m_id;
}

int Computer::get_id() {return m_id;}

double Computer::get_final_rating() const {
    return m_finalRating;
}

std::list<Malware *> Computer::get_malwares() {return m_malwares;}

int Computer::get_unique_id() const {return m_unique_id;}

void Computer::set_final_rating(double finalRating) {m_finalRating=finalRating;}

void Computer::update_final_rating() {
    double val {};
    std::for_each(m_malwares.begin(),m_malwares.end(),[&val](Malware* elem) {
        elem->update_impact_rating();
        val += elem->get_impact_rating();
    });
    m_finalRating = val;
}

void Computer::set_malwares(const std::list<Malware *> &malwares) {m_malwares=malwares;}

std::ostream &operator<<(std::ostream &out, const Computer &rhs) {
    out << "Calculatorul cu id: " << rhs.get_unique_id() << '\n';
    out << "Calculatorul are un rating: " << rhs.m_finalRating << " si este infectat cu "
        << rhs.m_malwares.size() << " tipuri de malware!\n";
    out << "Tipurile de malware sunt: ";
    std::for_each(rhs.m_malwares.begin(),rhs.m_malwares.end(),[](Malware* elem){std::cout << elem->get_name()<<",";});
    std::cout << '\n';
    return out;
}

std::istream &operator>>(std::istream &in, Computer &rhs) {
    std::cout << "1.RootKit\n2.Keylogger\n3.KernelyKeylogger\n4.Ransomware\n";
    std::cout << "opt: ";
    int opt {-1};
    in >> opt;
    std::cout << '\n';
    if (MalwareFactory::get_malware_type(opt) != MalwareTypes::Invalid) {
        auto malware {MalwareFactory::create_malware(MalwareFactory::get_malware_type(opt))};
        std::cin >> *malware;
        rhs.m_malwares.emplace_back(malware);
    } else {
        std::cout << "Invalid malware id!\n";
    }
    return in;
}

Computer::~Computer() {
    for (Malware* elem : m_malwares) {
        delete elem;
    }
}

void Computer::add_malware(Malware* malware) {
    m_malwares.push_back(malware);
}

std::ofstream &operator<<(std::ofstream &out, const Computer &rhs) {
    out << rhs.m_unique_id << ',' << rhs.m_finalRating << '\n';
    return out;
}
