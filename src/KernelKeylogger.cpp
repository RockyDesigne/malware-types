//
// Created by HORIA on 29.12.2023.
//

#include "KernelKeylogger.h"

#include <iostream>

KernelKeylogger::KernelKeylogger(double impactRating, int day, int month, int year, std::string name,
                                 std::string infectionMethod, std::list<std::string> modifiedRegisters,
                                 bool hidingFiles, bool hidingRegisters) : Malware{impactRating,day,month,year,std::move(name),std::move(infectionMethod),std::move(modifiedRegisters)},
                                                                           m_hidingFiles{hidingFiles}, m_hidingRegisters{hidingRegisters} {}

bool KernelKeylogger::get_hiding_files() const {return m_hidingFiles;}

bool KernelKeylogger::get_hiding_registers() const {return m_hidingRegisters;}

void KernelKeylogger::set_hiding_files(bool hidingFiles) {m_hidingFiles=hidingFiles;}

void KernelKeylogger::set_hiding_registers(bool hidingResgisters) {m_hidingRegisters=hidingResgisters;}

void KernelKeylogger::update_impact_rating() {
    RootKit::update_impact_rating();
    Malware::set_checked_regs(true);
    Keylogger::update_impact_rating();
    Malware::set_checked_regs(false);
    double val {RootKit::get_impact_rating() + Keylogger::get_impact_rating()};
    if (m_hidingFiles) {val += 20;}
    if (m_hidingRegisters) {val += 30;}
    set_impact_rating(val);
}

std::ostream& KernelKeylogger::print(std::ostream &out) {
    RootKit::print(out);
    Malware::set_print_called(true);
    Keylogger::print(out);
    Malware::set_print_called(false);
    std::cout << "Ascunde registri: ";
    if (m_hidingFiles) {out << "Da\n";} else {out << "Nu\n";}
    out << "Ascunde Fisiere: ";
    if (m_hidingRegisters) {out << "Da\n";} else {out << "Nu\n";}
    return out;
}

std::istream& KernelKeylogger::read(std::istream &in) {
    RootKit::read(in);
    Malware::set_read_called(true);
    Keylogger::read(in);
    Malware::set_read_called(false);
    std::cout << "Ascunde registri?(y/n): ";
    char opt;
    in >> opt;
    if (opt == 'y') {
        m_hidingRegisters = true;
    } else {
        m_hidingRegisters = false;
    }
    std::cout << "\nAscunde fisiere?(y/n): ";
    std::cin >> opt;
    if (opt == 'y') {
        m_hidingFiles = true;
    } else {
        m_hidingFiles = false;
    }
    return in;
}
