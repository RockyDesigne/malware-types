//
// Created by HORIA on 29.12.2023.
//

#include "Menu.h"
#include <fstream>
#include <ios>

Menu* Menu::m_menu = nullptr;

Menu* Menu::get_instance() {
    if (!m_menu) {
        return new Menu;
    }
    return m_menu;
}

void Menu::free_instance() {
    delete m_menu;
    m_menu = nullptr;
}

bool Menu::get_state() const {return m_on;}

void Menu::display_main() {
    std::cout << "1. Adauga Calculator\n"
                 "2. Afiseaza Calculatore\n"
                 "3. Acceseaza calculator\n"
                 "4. Save to csv and quit\n"
                 "5. Quit without saving\n"
                 "-----------------------------------\n";
    main_menu_funcionality();
}

void Menu::main_menu_funcionality() {
    int opt {};
    std::cout << "Introdu optiune: ";
    std::cin >> opt;
    std::cout << '\n';
    switch (opt) {
        case 1: {
            add_computer();
            break;
        }
        case 2: {
            display_computers();
            break;
        }
        case 3: {
            side_menu_functionality();
            break;
        }
        case 4: {
            save_to_csv();
        }
        case 5:
        default: {
            m_on = false;
            break;
        }
    }
}

void Menu::save_to_csv() {
    std::ofstream fout {"data.txt"};
    fout << "ID,Final-Rating\n";
    for (auto elem : m_computers) {
        fout << (*elem);
    }
}

void Menu::add_computer() {
    m_computers.push_back(new Computer);
}

void Menu::display_computers() {
    std::for_each(m_computers.begin(), m_computers.end(),[](const Computer* obj){
        std::cout << *obj;
    });
}

std::list<Computer*>::iterator Menu::access_computer() {
    std::cout << "Introdu id calc: ";
    int id{-1};
    std::cin >> id;
    std::cout << '\n';
    return std::find_if(m_computers.begin(), m_computers.end(),[id](auto it){
        return it->get_unique_id()==id;
    });
}

void Menu::display_second_menu() {
    std::cout << "1. Afisare Calculator\n"
                 "2. Introducere tip malware\n"
                 "Orice alta optiune este back\n"
                 "--------------------------------\n";
}

void Menu::side_menu_functionality() {
    auto pc {access_computer()};
    if (pc == m_computers.end()) {
        std::cout << "Invalid id!\n";
        return;
    }
    display_second_menu();
    int calc_opt{};
    std::cout << "Introdu opt: ";
    std::cin >> calc_opt;
    std::cout << '\n';
    switch (calc_opt) {
        case 1: {
            std::cout << *pc;
            break;
        }
        case 2: {
            bool keepGoing {true};
            do {
                std::cin >> *(*pc);
                std::cout << "Keep adding Malware?(y/n): ";
                char opt;
                std::cin >> opt;
                if (opt != 'y') {
                    keepGoing = false;
                }
            } while (keepGoing);
            (*pc)->update_final_rating();
            break;
        }
        default: {
            break;
        }
    }
}

Menu::~Menu() {
    std::for_each(m_computers.begin(),m_computers.end(),[](auto pc){delete pc;});
}
