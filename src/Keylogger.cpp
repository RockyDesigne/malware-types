//
// Created by HORIA on 29.12.2023.
//

#include "Keylogger.h"

#include <iostream>

Keylogger::Keylogger(double impactRating, int day, int month, int year, std::string name, std::string infectionMethod,
                     std::list<std::string> modifiedRegisters, std::list<std::string> usedFunctions,
                     std::list<std::string> specialKeys) : Malware{impactRating,day,month,year,std::move(name),std::move(infectionMethod),std::move(modifiedRegisters)},
                                                           m_usedFunctions{std::move(usedFunctions)}, m_specialKeys{std::move(specialKeys)} {}

std::list<std::string> Keylogger::get_used_functions() {return m_usedFunctions;}

std::list<std::string> Keylogger::get_special_keys() {return m_specialKeys;}

void Keylogger::set_used_functions(const std::list<std::string> &usedFunctions) {m_usedFunctions=usedFunctions;}

void Keylogger::set_special_keys(const std::list<std::string> &specialKeys) {m_specialKeys=specialKeys;}

void Keylogger::update_impact_rating() {
    using table = std::vector<std::string>;
    table specialKeys {
            "[Up]", "[Num Lock]", "[Down]", "[Right]",
            "[UP]", "[Left]","[PageDown]"
    };
    table usedFunctions {
            "CreateFileW", "OpenProcess", "ReadFile", "WriteFile", "RegisterHotKey", "SetWindowsHookEx"
    };
    Malware::update_impact_rating();
    double val {Malware::get_impact_rating()};
    val += Malware::calculateRating(0, m_specialKeys, specialKeys,[](double add){return add+10;});
    val += Malware::calculateRating(val, m_usedFunctions, usedFunctions,[](double add){return add+30;});
    set_impact_rating(val);
}

std::istream& Keylogger::read(std::istream &in) {
    Malware::read(in);
    std::cout << "Introduceti lista de functii folosite: ";
    std::string line;
    std::getline(in,line);
    std::string delim {" "};
    Malware::tokenize(line,m_usedFunctions,delim);
    std::cout << "\nIntroduceti lista de chei speciale: ";
    std::getline(in,line);
    Malware::tokenize(line,m_specialKeys,delim);
    std::cout << "\n";
    return in;
}

std::ostream& Keylogger::print(std::ostream &out) {
    Malware::print(out);
    std::cout << "Are urmatoarele functii folosite: ";
    auto print {[&out](std::string_view elem){out << elem << ",";}};
    std::for_each(m_usedFunctions.begin(),m_usedFunctions.end(),print);
    out << "\n Are urmatoarele chei speciale: ";
    std::for_each(m_specialKeys.begin(),m_specialKeys.end(),print);
    out << '\n';
    return out;
}
